const React = require('react');class PlacesRow extends React.Component {	constructor(props) {super(props);this.state = {};}render(){			return <tr>					<th className="mdl-data-table__cell--non-numeric"> {this.props.element.businessname} </th>				<th > {this.props.calplacetotal(this.props.element,this.props.guest)}</th>				<th > {this.props.calplaceavg(this.props.element,this.props.guest)}</th>						</tr>			}}class Itinerary extends React.Component {constructor(props) {super(props);this.state = {places:[], subtotal: 0, subavgtotal:0,basefare:3.00, milefare:0, minutefare:0, carhire:0, tax:0, itineraryTotal:0,guest:0};this.calculateDistance = this.calculateDistance.bind(this);this.numberOFguest = this.numberOFguest.bind(this);this.calplacetotal = this.calplacetotal.bind(this);this.calplaceavg = this.calplacetotal.bind(this);this.logTrip = this.logTrip.bind(this);this.updatePlaces = this.updatePlaces.bind(this);this.carRental = 60;this.busRental = 120 ;}; calplacetotal(place,guest){			return (place.avergaeprice * guest ).toFixed(2) ;		}calplaceavg(place,guest){		return  (place.avergaeprice * guest ).toFixed(2) ;	}logTrip(){	var formData = new FormData();formData.append('subtotal',this.state.subtotal.toFixed(2)),formData.append('subavgtotal',this.state.subavgtotal.toFixed(2)),formData.append('basefare', this.state.basefare.toFixed(2)),formData.append('milefare',this.state.milefare),formData.append('minutefare',this.state.minutefare),formData.append('carhire',this.state.carhire.toFixed(2)),formData.append('tax',this.state.tax.toFixed(2)),formData.append('itineraryTotal',this.state.itineraryTotal.toFixed(2)),formData.append('guest',this.state.guest.toFixed(2)),formData.append('places',JSON.stringify(window.sessionStorage.Itinery)),this.xhttp = new XMLHttpRequest();	this.xhttp.onreadystatechange = function() {		if (this.readyState == 4 && this.status == 200) {						window.sessionStorage.tripID = this.responseText.replace(/\"/g, "");			 			window.location.assign("/reservation.html");		}};this.xhttp.open("POST", "/api/trip", true);this.xhttp.send(formData) 		}calculateDistance(destinations){const context = this ;var origin1 = new google.maps.LatLng(18.167217, -76.380402);var service = new google.maps.DistanceMatrixService();service.getDistanceMatrix(  {    origins: [origin1],    destinations: destinations,    travelMode: 'DRIVING',    unitSystem: google.maps.UnitSystem.METRIC  }, function(response, status){	  	  	   if (status == 'OK') {		   		   var totalmeters = 0 ; 			var totalseconds =  0 ; 		for (var i = 0; i < response.rows[0].elements.length; i++) {							 				totalmeters += Number(response.rows[0].elements[i].distance.value);				totalseconds += Number(response.rows[0].elements[i].duration.value);							 				}															context.setState({ milefare:((Number(totalmeters) / 1609.344 ) * Number(2.10)).toFixed(2) , minutefare : (((( Number(totalmeters) / 1609.344 ) / 45 ) * 60 ) * Number(0.15) ).toFixed(2) });					   	  			}				  });	}updatePlaces(){		const context = this ; 		var subTotalGeneral = 0 ;		var subTotalAvg = 0 ;		this.state.places.forEach(function (element,index) {												subTotalGeneral += Number(element.props.element.avergaeprice) * context.state.guest  ; 										subTotalAvg += Number(element.props.element.avergaeprice) * context.state.guest  ; 					  		});				this.setState({places:this.state.places, subtotal:subTotalGeneral, subavgtotal:subTotalAvg,itineraryTotal:Number(this.state.subtotal)+Number(this.state.subavgtotal)+Number(this.state.tax)+Number(this.state.carhire)+Number(this.state.basefare)+Number(this.state.milefare)+Number(this.state.minutefare)});			}numberOFguest(event){	var  guests = this.state.guest;const context = this;guests +=  event.target.getAttribute("data-id") === "adults" ?  Number(event.target.value) : event.target.getAttribute("data-id") === "children" ? Number(event.target.value) : "" ;this.setState({guests:guests},function(){var carhire = Math.floor(guests / 5 ) > 1 ? context.busRental : context.carRental  ; 	context.setState({carhire:carhire},function(){			context.updatePlaces();			});		});}componentDidMount() {     	 	 	const context = this; 	 	var places = [];	 	var distanceUrls = [];	 	this.xhttp = new XMLHttpRequest();	this.xhttp.onreadystatechange = function() {		if (this.readyState == 4 && this.status == 200) {				  			JSON.parse(this.responseText).forEach(function (element,index) {													     JSON.parse(window.sessionStorage.Itinery).indexOf( element._id ) != -1 ?  							( places.push(<PlacesRow element={element}  key={"places_"+index } calplacetotal={context.calplacetotal}  calplaceavg={context.calplaceavg} guest={context.state.guest}/> ) ,				 distanceUrls.push(new google.maps.LatLng(element.coordinates['Latitude'] , element.coordinates['Longitude'])) ): "" ;					  		});						context.setState({places:places},function(){											context.calculateDistance(distanceUrls);											});												}	};this.xhttp.open("GET", "/api/trip", true);this.xhttp.setRequestHeader("Content-Type", "application/json");this.xhttp.send();	}render() {      return <main className="demo-main mdl-layout__content">					<div className="table row1">      <div className="table-cell" ><div className="mdl-grid">  <div className="mdl-cell mdl-cell--6-col mdl-cell--5-tablet"></div>  <div className="mdl-cell mdl-cell--2-col mdl-cell--1-tablet">Adults</div>  <div className="mdl-cell mdl-cell--2-col mdl-cell--1-tablet">Children</div>  <div className="mdl-cell mdl-cell--2-col mdl-cell--1-tablet">Infants</div></div><div className="mdl-grid">  <div className="mdl-cell mdl-cell--6-col mdl-cell--5-tablet">Please select the number of people taking part in this trip </div>  <div className="mdl-cell mdl-cell--2-col mdl-cell--1-tablet"><select  className="" name="adults"  data-id="adults" onChange={ (e) => this.numberOFguest(e) }><option value="0">0</option><option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option></select> </div>  <div className="mdl-cell mdl-cell--2-col mdl-cell--1-tablet">  	<select  className="" name="children"  data-id="children" onChange={ (e) => this.numberOFguest(e) }><option value="0">0</option><option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option></select>   </div>  <div className="mdl-cell mdl-cell--2-col mdl-cell--1-tablet">  	<select  className="" name="infants" data-id="infants" onChange={ (e) => this.numberOFguest(e) }><option value="0">0</option><option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option></select>    </div></div>											</div>					  <div className="table-cell" >																																		<table className="mdl-data-table mdl-js-data-table">														<thead><tr><th className="mdl-data-table__cell--non-numeric"></th><th className="mdl-data-table__cell--non-numeric"> General Admission</th><th className="mdl-data-table__cell--non-numeric">Avg Price</th></tr>																{this.state.places}																				</thead>																	<tbody>														<tr>  								<th className="mdl-data-table__cell--non-numeric"> Sub Total </th >								<th  > {this.state.subavgtotal.toFixed(2)} </th>								<th  > {this.state.subtotal.toFixed(2)}</th>							</tr>								<tr>  								<th  className="mdl-data-table__cell--non-numeric"> Base Fare </th >								<th className="mdl-data-table__cell--non-numeric"> USD</th>								<th > {this.state.basefare.toFixed(2)}</th>							</tr>							<tr>  								<th  className="mdl-data-table__cell--non-numeric"> Mile Fare @ $ / mile  </th >								<th  className="mdl-data-table__cell--non-numeric"> USD</th >								<th  > {this.state.milefare} </th>							</tr>							<tr>  								<th  className="mdl-data-table__cell--non-numeric"> Minute Fare @ $ / minute </th>								<th  className="mdl-data-table__cell--non-numeric"> USD</th >								<th  > {this.state.minutefare}</th>							</tr>							<tr>  								<th  className="mdl-data-table__cell--non-numeric"> Minimum Fare (*includes car or bus hire) </th >								<th  className="mdl-data-table__cell--non-numeric"> USD</th >								<th  > {this.state.carhire.toFixed(2)}</th>							</tr>							<tr>  								<th  className="mdl-data-table__cell--non-numeric"> Tax </th >								<th  className="mdl-data-table__cell--non-numeric"> USD</th >								<th> {this.state.tax}</th>							</tr>							<tr>  								<th  className="mdl-data-table__cell--non-numeric"> Fare Estimate </th>								<th  className="mdl-data-table__cell--non-numeric"> </th>								<th > {this.state.itineraryTotal.toFixed(2)} </th >							</tr>																	</tbody>														</table>												<button className="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent tripConfirm" onClick={(e) => this.logTrip()}>CONTINUE</button>										</div>								</div></main>	     }}module.exports = Itinerary;