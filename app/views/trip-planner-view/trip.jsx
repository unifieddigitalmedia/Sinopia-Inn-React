const React = require('react');const ReactDOM = require('react-dom');import PlacesList from './PlacesList.jsx';import SpecialInterest from './SpecialInterest.jsx';import TypeOfService from './TypeOfService.jsx';import PlacesOfInterest from './PlacesOfInterest.jsx';import InfoWindow from './InfoWindow.jsx';class TravelPlanner extends React.Component {constructor(props) {super(props);this.map = null;this.state = {services:[],places:[],filteredServices:[],mapMarkers:[],Itinery:[],filteredPlaces:[],userPlaces:[],Places:[]}this.filterInterests = this.filterInterests.bind(this);this.addTypeofService = this.addTypeofService.bind(this);this.removeTypeofService = this.removeTypeofService.bind(this);this.filterPlaces = this.filterPlaces.bind(this);this.Places = this.Places.bind(this);this.drop = this.drop.bind(this);this.lift = this.lift.bind(this);this.addToItinery = this.addToItinery.bind(this);this.logTrip = this.logTrip.bind(this);this.handleBusinessNameSearch = this.handleBusinessNameSearch.bind(this);}; handleBusinessNameSearch(event) { var filteredPlaces = []; const context = this; event.target.value.length > 2 ?				this.state.places.forEach(function(place,index) {place.businessname.match( new RegExp(event.target.value, "i")) != null  ? filteredPlaces.indexOf(place) === -1 ?  filteredPlaces.push(place) : "" : "" ;}) : filteredPlaces = []  ;this.setState({filteredPlaces:filteredPlaces });}logTrip(){	this.state.Itinery.length < 1 ? alert("Please confirm atleast one place you would like to visit") : ( window.sessionStorage.Itinery = JSON.stringify(this.state.Itinery) , location.assign("/your-itinerary.html") ) ;}addToItinery(event, para , para1, para2, para3){var Itinery = this.state.Itinery ;var Places = this.state.Places ;var context = this ; para1 === -1 ?  ( Itinery.push(para._id) , Places.push(para) ) : ( Itinery.splice( para1 , 1 )  , Places.splice( para1 , 1 ) ) ; 	this.setState({Itinery : Itinery},function(){	var  mapMarkers = this.state.mapMarkers;	para2 != null ?  mapMarkers[mapMarkers.indexOf(para2)].metadata.set = true    :    mapMarkers.forEach(function(element,index) {			    para._id === element.metadata._id ?  ( mapMarkers[index].metadata.set = false , context.setState({mapMarkers : mapMarkers},function(){ context.lift (para,context.state.filteredServices)  }) ) :  ""  						}) ;    	});		}lift (place,filteredServices){var mapMarkers = this.state.mapMarkers;mapMarkers.forEach(function (element, index){var found = false;			element.metadata.service.forEach(function(value,counter){							filteredServices.indexOf(value.typeofservice) != -1 ?  found = true :  ""  ; 								});found || element.metadata.set == "true"  ?  ""  : ( element.setMap(null) , mapMarkers.splice(mapMarkers.indexOf(element) ,1) ) ;});this.setState({mapMarkers : mapMarkers});	}drop (place){const context = this ; var mapMarkers = this.state.mapMarkers;window.setTimeout(function() {var marker = new google.maps.Marker({      position: new google.maps.LatLng(place.coordinates.Latitude,place.coordinates.Longitude),      draggable: false,      map:context.map,      title:place.businessname,      animation: google.maps.Animation.DROP,metadata: {            service:place.activity,            set:'false',            lat:place.coordinates.Latitude,              lng:place.coordinates.Longitude,            _id:place._id,   },    });mapMarkers.push(marker);context.setState({mapMarkers : mapMarkers });var content = document.createElement('section');content.setAttribute("className","infowindow");   ReactDOM.render(<InfoWindow  place={place}  addToItinery={context.addToItinery}   Itinery ={context.state.Itinery}  marker={marker}/> , content);  var infowindow = new google.maps.InfoWindow({	    content: content    });marker.addListener('click', function() {		    infowindow.open(context.map, marker);    });google.maps.event.addListener(marker, 'dragstart', function() {     marker.setPosition(new google.maps.LatLng(place.coordinates.Latitude,place.coordinates.Longitude));  });google.maps.event.addListener(marker, 'drag', function() {    marker.setPosition(new google.maps.LatLng(place.coordinates.Latitude,place.coordinates.Longitude));  });google.maps.event.addListener(infowindow, 'domready', function() {      });}, 1000);		}filterPlaces(event,services){	var filteredServices = this.state.filteredServices;		event.target.checked ?  ( filteredServices.push(event.target.value) , this.setState({filteredServices : filteredServices},function(){				this.Places(this.state.filteredServices,"add");	}) )  :  ( filteredServices.splice(filteredServices.indexOf(event.target.value),1)  , this.setState({filteredServices : filteredServices},function(){		    		this.Places(this.state.filteredServices,"delete");		}) ) ; }Places(filteredServices,action){var places = this.state.userPlaces;const context = this ; action === "add" ?  this.state.places.forEach(function (element,index) {		element.activity.forEach(function (item,counter) {		filteredServices.indexOf(item.typeofservice)  != -1  ?  places.indexOf(element)  ===  - 1  ?   (context.drop(element) , places.push(element)   ) :  ""   :  "" ;          					});}) :  places.forEach(function(element,index){					var found = false;						element.activity.forEach(function (item,counter) {							filteredServices.indexOf(item.typeofservice) != -1 ?  found = true :  ""  ; 			});					found ?  ""  : ( context.lift(element,filteredServices) ,places.splice(places.indexOf(element) , 1)  , context.Places(filteredServices,"delete")) ;						}); 			this.setState({userPlaces : places});}filterInterests(event,interests){ event.target.checked ?  this.addTypeofService(interests,event.target.value) : this.removeTypeofService(interests,event.target.value) ;  }addTypeofService(interests, value){		var tos = this.state.services;	this.state.places.forEach(function (element,index) {		element.activity.forEach(function (item,counter) {				item.typeofbusiness === value  ?  tos.indexOf(JSON.stringify({"name":item.typeofservice , "icon": element.materialDesign }))  ===  - 1  ?   tos.push(JSON.stringify({"name":item.typeofservice , "icon": element.materialDesign })) :  ""   :  "" ;    		   	});});this.setState({services : tos});}removeTypeofService(interests, value){		var tos = this.state.services; 		this.state.places.forEach(function (element,index) {		element.activity.forEach(function (item,counter) {				item.typeofbusiness === value  ?  (tos.splice(tos.indexOf(item.typeofservice)  , 1 ) )  :  "" ;          		   	});});const context = this;this.setState({services : tos},function(){				context.Places(context.state.services,"delete");		});this.map = null;}componentDidMount(){			const context = this; 	    	this.xhttp = new XMLHttpRequest();	this.xhttp.onreadystatechange = function() {		if (this.readyState == 4 && this.status == 200) {				 			context.setState({places : JSON.parse(this.responseText)});									 			 	  		}};this.xhttp.open("get", "/api/trip", true);this.xhttp.setRequestHeader("Content-Type", "application/json");this.xhttp.send();$("#map").css("height", $( window ).height()/2);context.map = new google.maps.Map(document.getElementById('map'), {          center: {lat: 18.171100, lng: -76.442305},           zoomControl: true,          zoomControlOptions: {          position: google.maps.ControlPosition.LEFT_CENTER              },          zoom: 8                });	      }render() {var tob = []; this.state.places.forEach(function (element,index) {			element.activity.forEach(function (item,counter) {							tob.indexOf(JSON.stringify({"name":item.typeofbusiness , "icon": element.materialDesign })) === -1 ? tob.push(JSON.stringify({"name":item.typeofbusiness , "icon": element.materialDesign })) : "" ;			});	});      return <main className="demo-main c">				<div className="mdl-grid">   <div className="mdl-cell mdl-cell--4-col  mdl-cell--8-col-tablet  mdl-cell--4-col-phone"><table className="mdl-data-table mdl-js-data-table headingTable">  <thead>    <tr>      <th className="mdl-data-table__cell--non-numeric">REFINE YOUR EXPERIENCE</th>    </tr>  </thead></table><div   className="optionsContainer">        <div className="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">			<input className="mdl-textfield__input filterTextbox" type="text" id="search" onChange={this.handleBusinessNameSearch}/>			<label className="mdl-textfield__label" htmlFor="search">Search...</label>	   </div>  </div><div   className="optionsContainer"><PlacesList   places={this.state.filteredPlaces} drop={this.drop}/></div><table className="mdl-data-table mdl-js-data-table subheadingTable">  <thead>    <tr>      <th className="mdl-data-table__cell--non-numeric ">SPECIAL INTEREST</th>    </tr>  </thead></table><div   className="optionsContainer">{tob.length != 0 ? <SpecialInterest  interests={tob} filterInterests={this.filterInterests}/> : null }</div><table className="mdl-data-table mdl-js-data-table subheadingTable">  <thead>    <tr>      <th className="mdl-data-table__cell--non-numeric ">TYPE OF SERVICE</th>    </tr>  </thead></table><div   className="optionsContainer"><TypeOfService    services={this.state.services} filterPlaces={this.filterPlaces} /></div><button className="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent tripConfirm" onClick={(e) => this.logTrip()}>  CONFIRM ITINERARY</button>  </div>  <div className="mdl-cell mdl-cell--8-col mdl-cell--8-col-tablet  mdl-cell--4-col-phone mapcoveringDiv">					<div id="map" className="map "> </div>					<PlacesOfInterest     addToItinery={this.addToItinery}   Itinery ={this.state.Places} filteredServices={this.state.filteredServices}/>					  </div></div></main>	     }}module.exports = TravelPlanner;