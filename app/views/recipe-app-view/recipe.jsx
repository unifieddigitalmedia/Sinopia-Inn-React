const React = require('react');const ReactDOM = require('react-dom');class NewStepsRow extends React.Component {constructor(props) {super(props);}; render(){	 return <li className="mdl-list__item">			<span className="mdl-list__item-primary-content">			<small className=""> Step { this.props.position } </small>			<input className="mdl-textfield__input steps" type="text"  />			</span>		</li>	}}class NewNutritionRow extends React.Component {constructor(props) {super(props);}; render(){	 return <tr><td className="mdl-data-table__cell--non-numeric"><input className="mdl-textfield__input nutrient" type="text"  /></td><td className="mdl-data-table__cell--non-numeric"> <input className="mdl-textfield__input dv" type="text"  /></td><td className="mdl-data-table__cell--non-numeric"> <input className="mdl-textfield__input dv_percentage" type="text"  /></td></tr>	}}class NewIngredientRow extends React.Component {constructor(props) {super(props);}; render(){	 return <li className="mdl-list__item">			<span className="mdl-list__item-primary-content">			<i className="material-icons">check_circle</i>			  <div className="mdl-textfield mdl-js-textfield mdl-textfield--floating-label is-focused">                <input className="mdl-textfield__input ingredients" type="text" id="ingredients" />                <label className="mdl-textfield__label" htmlFor="ingredients">Ingredient Name </label>                </div>			</span>		</li>				}}class StepsRow extends React.Component {constructor(props) {super(props);}; render(){	 return  <li className="mdl-list__item">			<span className="mdl-list__item-primary-content">			<span className="stepSpan">			<small className=""> Step { this.props.position } </small>			</span>			{this.props.element}			</span>		</li>}}class NutritionRow extends React.Component {constructor(props) {super(props);}; render(){	return <tr><th className="mdl-data-table__cell--non-numeric" >{this.props.element.nutrient}</th><th className="mdl-data-table__cell--non-numeric">{this.props.element.dv}</th><th className="mdl-data-table__cell--non-numeric">{this.props.element.dv_percentage}</th></tr>	}}class IngredientRow extends React.Component {constructor(props) {super(props);}; render(){	return <li className="mdl-list__item">			<span className="mdl-list__item-primary-content">					<i className="material-icons mdl-list__item-icon">check_circle</i>			{this.props.element}			</span>		</li>	}}class RecipeApp extends React.Component {constructor(props) {super(props);this.state = { recipe : null ,ingredients:null ,nutrients:null ,steps:null,recipeID:""};this.ingredients = [];this.nutrients = [];this.steps = [];this.addnewrecipeIngredients = this.addnewrecipeIngredients.bind(this);this.addnewrecipeIngredientNutrient = this.addnewrecipeIngredientNutrient.bind(this);this.addnewrecipeIngredientStep = this.addnewrecipeIngredientStep.bind(this);this.post = this.post.bind(this);this.getRecipe = this.getRecipe.bind(this);};getRecipe(recipeID){			const recipeObj = {			 recipeID:recipeID,			 };var context = this;  var ingredients  = [];	   var nutrients = [];	   var steps = [];			this.xhttp = new XMLHttpRequest();	this.xhttp.onreadystatechange = function() {		if (this.readyState == 4 && this.status == 200) {						 			context.setState({recipe:JSON.parse(this.responseText) },function(){												context.state.recipe.ingredientsArray.forEach(function(element,index){							ingredients.push(<IngredientRow   element={element} key={"ingredients_"+index} />);						});								 context.setState({ingredients : ingredients},function(){									context.state.recipe.nutrientsArray.forEach(function(element,index){							nutrients.push(<NutritionRow   element={element} key={"nutrients"+index} />);						});								 context.setState({nutrients : nutrients},function(){									context.state.recipe.stepsArray.forEach(function(element,index){							steps.push(<StepsRow   element={element} key={"steps"+index} />);						});								 context.setState({steps : steps},function(){					 					 					 					 });												});												});																});			 		}};this.xhttp.open("GET", "/api/recipe?recipeID="+recipeID, true);this.xhttp.setRequestHeader("Content-Type", "application/json");this.xhttp.send();	}post(event){		  var ingredientsArray = [];	  	  var nutrientsArray = [];	  	  var stepsArray = [];	  	  var context = this;	  	  	  var ingredients = document.getElementsByClassName("ingredients");        Array.prototype.forEach.call(ingredients, function(element,index) {				ingredientsArray.push(element.value);                      });		var nutrients = document.getElementsByClassName("nutrient");	var dv = document.getElementsByClassName("dv");	var dv_percentage = document.getElementsByClassName("dv_percentage");        Array.prototype.forEach.call(nutrients, function(element,index) { const nutientObj = {	 	 nutrient:nutrients[index].value,	 dv:dv[index].value,	 dv_percentage:dv_percentage[index].value	 	 	 }               nutrientsArray.push(nutientObj);        });		var steps = document.getElementsByClassName("steps");        Array.prototype.forEach.call(steps, function(element,index) {              stepsArray.push(element.value);        });var fileSelect = document.getElementById('file-select');var files = fileSelect.files;var formData = new FormData();  formData.append('prep',document.getElementById("prep").value); formData.append('cook',document.getElementById("cook").value); formData.append('read',document.getElementById("read").value); formData.append('ingredientsArray',JSON.stringify(ingredientsArray)); formData.append('nutrientsArray',JSON.stringify(nutrientsArray)); formData.append('stepsArray', JSON.stringify(stepsArray)); formData.append('recipe_name',document.getElementById("recipe_name").value); formData.append('recipe_description', document.getElementById("recipe_description").value);files[0] != undefined ? !files[0].type.match('image.*') ? "" :( formData.append('file[]', files[0], files[0].name) , document.getElementById("myModal").style.display= "block" , this.xhttp.send(formData)  ) :  alert("Please select an photo that shocases your recipe");; this.xhttp = new XMLHttpRequest();this.xhttp.onreadystatechange = function() {		if (this.readyState == 4 && this.status == 200) {									context.getRecipe(JSON.parse(this.responseText));								}						}this.xhttp.open("POST", "/api/recipe", true);}addnewrecipeIngredients(event){		var key = this.ingredients.length  == 0 ? 1 : this.ingredients.length + 1 , context = this ;			event.target.getAttribute("data-id") === "add" ?  this.ingredients.push(<NewIngredientRow    key={key} />) :  this.ingredients.splice(this.ingredients.length-1,1);			context.setState({ingredients : this.ingredients});}addnewrecipeIngredientNutrient(event){			var key = this.nutrients.length  == 0 ? 1 : this.nutrients.length + 1 , context = this ;	event.target.getAttribute("data-id") === "add" ?  this.nutrients.push(<NewNutritionRow    key={key} />) :  this.nutrients.splice(this.nutrients.length-1,1);	context.setState({nutrients : this.nutrients});	}addnewrecipeIngredientStep(event){			var key = this.steps.length  == 0 ? 1 : this.steps.length + 1 , context = this ;	event.target.getAttribute("data-id") === "add" ?  this.steps.push(<NewStepsRow    key={key} position={ this.steps.length + 1} />) :  this.steps.splice(this.steps.length-1,1);	context.setState({steps : this.steps});		}componentDidMount() {	   	   this.setState({recipeID : window.sessionStorage.recipeID});	 	   	   var ingredients  = [];	   var nutrients = [];	   var steps = [];		       const context = this ;			this.xhttp = new XMLHttpRequest();	this.xhttp.onreadystatechange = function() {		if (this.readyState == 4 && this.status == 200) {				 				 			 context.setState({recipe : JSON.parse(this.responseText) },function(){									context.state.recipe.ingredientsArray.forEach(function(element,index){							ingredients.push(<IngredientRow   element={element} key={"ingredients_"+index} />);						});								 context.setState({ingredients : ingredients},function(){									context.state.recipe.nutrientsArray.forEach(function(element,index){							nutrients.push(<NutritionRow   element={element} key={"nutrients"+index} />);						});								 context.setState({nutrients : nutrients},function(){									context.state.recipe.stepsArray.forEach(function(element,index){							steps.push(<StepsRow   position={index+1} element={element} key={"steps"+index} />);						});								 context.setState({steps : steps},function(){					 					 					 console.log("re rendering");					 					 });												});												});						});	  		}};this.xhttp.open("get", "/api/recipe?recipeID="+window.sessionStorage.recipeID, true);this.xhttp.setRequestHeader("Content-Type", "application/json");window.sessionStorage.recipeID != null ? this.xhttp.send(JSON.stringify()) :   ""  ;       	}	   render() {      	  var stars =[];		 		 	for (var i = 0 ; i < 5 ; i++) {					i >= 0 ? stars.push(<img src="../graphics/star.png" key={i} />) : stars.push(<img src="..graphics/goldStar.png" key={i} />) ;					}if(this.state.recipe != null ){ 	var imgUrl = this.state.recipe.image_url;const divStyle = {			 backgroundImage: 'url(' + imgUrl + ')',	  backgroundSize: 'cover',    backgroundRepeat: 'no-repeat',	 backgroundPosition: 'center',	}		return <section> <h2>{this.state.recipe.recipe_name} </h2>		 		 {stars}		 		 					&nbsp;			<div className="demo-ribbon" style={divStyle}></div>				<main className="article demo-main ">        <div className="">				          <div className=" mdl-color--white mdl-shadow--4dp content mdl-color-text--grey-800 mdl-cell mdl-cell--12-col mdl-cell--8-tablet mdl-cell--4-phone table-container">		  		   <div className="mdl-grid">    <div className="mdl-cell mdl-cell--4-col mdl-cell--8-col-tablet mdl-cell--4-col-phone">  <h5>{this.state.recipe.prep} M </h5><p>Prep time </p>    </div>    <div className="mdl-cell mdl-cell--4-col mdl-cell--4-col-phone mdl-cell--8-col-tablet">    <h5>{this.state.recipe.cook} M</h5><p>Cook time</p>         </div>  <div className="mdl-cell mdl-cell--4-col mdl-cell--4-col-phone mdl-cell--8-col-tablet">      <h5>{this.state.recipe.read} M </h5>  <p> Read time</p>    </div>  </div>          </div>		  		   </div>		<p className="description"> {this.state.recipe.recipe_description}</p><div className="mdl-grid ">  <div className="mdl-cell mdl-cell--6-col mdl-cell--4-tablet  mdl-cell--4-phone">     <h5> INGREDIENTS </h5>   <ul className="demo-list-item mdl-list ingredients-grid">  {this.state.ingredients}    </ul>        </div>  <div className="mdl-cell mdl-cell--6-col  mdl-cell--4-tablet  mdl-cell--4-phone">     <h5> NUTRIENTS</h5>   <table className="mdl-data-table mdl-js-data-table mdl-shadow--2dp nutrients-table">  <thead>    <tr className="">      <th className="mdl-data-table__cell--non-numeric headingRow">Nutrient</th>      <th className="mdl-data-table__cell--non-numeric headingRow">DV</th>      <th className="mdl-data-table__cell--non-numeric headingRow">DV%</th>    </tr>  {this.state.nutrients}  </thead></table>      </div> </div>						<div className="stepsContainer"><ul className="demo-list-item mdl-list"><li><h5>            STEPS</h5></li> {this.state.steps}</ul>			</div>		</main>  </section>}else{return  <section> <div className="mdl-grid recipeApp">  <div className="mdl-cell mdl-cell--4-col mdl-cell--3-tablet mdl-cell--4-phone " ></div>  <div className="mdl-cell mdl-cell--8-col mdl-cell--5-tablet mdl-cell--4-phone ">      			  <section>                <div className="mdl-textfield mdl-js-textfield mdl-textfield--floating-label is-focused recipeNameTextBox">                <input className="mdl-textfield__input Username" type="text" id="recipe_name" />                <label className="mdl-textfield__label" htmlFor="Username">Recipe Name </label>                </div><div className="demo-ribbon"><form>			    <h2>Please upload an photo of your caribbean insipred recipe </h2>                 <br/>				 <input type="file" id="file-select" name="photo" className="recipeImage"/>				 				 				 </form>                              </div>				<main className="article demo-main recipe-article">        <div className="">												          <div className=" mdl-color--white mdl-shadow--4dp content mdl-color-text--grey-800 mdl-cell mdl-cell--12-col mdl-cell--8-tablet mdl-cell--4-phone table-container">		  		   <div className="mdl-grid">    <div className="mdl-cell mdl-cell--4-col mdl-cell--8-col-tablet mdl-cell--4-col-phone">  <div className="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">    <input className="mdl-textfield__input" type="text" name="prep" id="prep" />    <label className="mdl-textfield__label" htmlFor="prep">Prep time</label>  </div>      </div>    <div className="mdl-cell mdl-cell--4-col mdl-cell--4-col-phone mdl-cell--8-col-tablet">    <div className="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">    <input className="mdl-textfield__input" type="text" name="cook" id="cook" />    <label className="mdl-textfield__label" htmlFor="cook">Cook time</label>  </div>      </div>  <div className="mdl-cell mdl-cell--4-col mdl-cell--4-col-phone mdl-cell--8-col-tablet">  <div className="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">    <input className="mdl-textfield__input" type="text" name="read" id="read" />    <label className="mdl-textfield__label" htmlFor="read">Read time</label>  </div>          </div>    <div className="mdl-cell mdl-cell--4-col mdl-cell--4-col-phone mdl-cell--8-col-tablet">        </div></div>          </div>		  		   </div><div className="mdl-textfield mdl-js-textfield">    <textarea className="mdl-textfield__input" type="text" rows= "3" id="recipe_description" ></textarea>    <label className="mdl-textfield__label" htmlFor="description">Description</label>  </div><div className="mdl-grid ingreNutri">  <div className="mdl-cell mdl-cell--6-col mdl-cell--4-tablet  mdl-cell--4-phone">    <nav className="innertopnav uppertopnav">            INGREDIENTS            <span className="slidebutton">           <i className="material-icons"  onClick={(e) =>this.addnewrecipeIngredients(e)} data-id="add">add_circle_outline</i>			<i className="material-icons" onClick={(e) =>this.addnewrecipeIngredients(e)}  data-id="remove">remove_circle_outline</i>		  </span>         </nav>  <ul className="demo-list-item mdl-list ingredients-grid">  {this.state.ingredients}    </ul>        </div>  <div className="mdl-cell mdl-cell--6-col  mdl-cell--3-tablet  mdl-cell--4-phone">        <nav className="innertopnav uppertopnav">            NUTRIENTS            <span className="slidebutton">            <i className="material-icons"  onClick={(e) =>this.addnewrecipeIngredientNutrient(e)} data-id="add">add_circle_outline</i>		   <i className="material-icons" onClick={(e) =>this.addnewrecipeIngredientNutrient(e)} data-id="remove">remove_circle_outline</i>		  </span>         </nav><br></br>  <table className="mdl-data-table mdl-js-data-table mdl-shadow--2dp ingredients-grid">  <thead>    <tr>      <th className="mdl-data-table__cell--non-numeric">Nutrient</th>      <th className="mdl-data-table__cell--non-numeric">DV</th>      <th className="mdl-data-table__cell--non-numeric">DV%</th>    </tr>  </thead>  <tbody>  {this.state.nutrients}  </tbody></table>      </div> </div>						<div className="stepsContainer"><nav className="innertopnav uppertopnav">            STEPS            <span className="slidebutton">            <i className="material-icons"  onClick={(e) =>this.addnewrecipeIngredientStep(e)} data-id="add">add_circle_outline</i>		   <i className="material-icons" onClick={(e) =>this.addnewrecipeIngredientStep(e)} data-id="remove">remove_circle_outline</i>		  </span>         </nav>		 <ul className="demo-list-item mdl-list"> {this.state.steps}</ul>			</div><button className="mdl-button mdl-js-button mdl-button--raised mdl-button--colored"  onClick={(e) =>this.post(e)}>  Post</button>		</main>  </section></div></div><div id="myModal" className="modal">  <p className="mdl-spinner mdl-js-spinner mdl-spinner--single-color is-active progressIcons"></p></div></section>}   }}module.exports = RecipeApp;