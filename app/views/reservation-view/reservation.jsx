const React = require('react');import Datepicker from './Datepicker.jsx';import Rooms from './Rooms.jsx';import Useroffers from './Useroffers.jsx';import Userroom from './Userroom.jsx';import Offers from './Offers.jsx';import Amenities from './Amenities.jsx';import CheckoutTill from './CheckoutTill.jsx';import ModalContainer from './ModalContainer.jsx';class ReservationContainer extends React.Component {		constructor(props) {      	  	  super(props);	this.state = { fromDate : null , toDate:null, hotel:[], rooms:[] , offers: [], amenities:[]  ,userRooms:[],userOffers:[],userAmenities:[],stay:0, guests:0,roomChoosen:null ,tripID:null}this.checkAvailability = this.checkAvailability.bind(this);this.addtoArray = this.addtoArray.bind(this);this.numOfguest = this.numOfguest.bind(this);this.addAmenity = this.addAmenity.bind(this);this.checkAvailability = this.checkAvailability.bind(this);this.checkout = this.checkout.bind(this);this.updateRooms  = this.updateRooms.bind(this);this.selectRoom  = this.selectRoom.bind(this);this.showDiv  = this.showDiv.bind(this);this.plusSlides  = this.plusSlides.bind(this);this.slideIndex = null;this.closeError  = this.closeError.bind(this);this.formatDate  = this.formatDate.bind(this);   };	closeError(){				  			  		document.querySelector('.modalReservationError').style.display="none" ;						 	}plusSlides(n) {	 this.showDiv(this.slideIndex += n);}showDiv(para) {		   this.slideIndex = para;        para > document.getElementsByClassName("mySlides").length ? this.slideIndex = 1 : null;                para < 1 ? this.slideIndex = document.getElementsByClassName("mySlides").length : null;                Array.prototype.forEach.call(document.getElementsByClassName("mySlides"), (element,index)  => {                 document.getElementsByClassName("mySlides")[index].style.display = "none";                 document.getElementsByClassName("demo")[index].className = document.getElementsByClassName("demo")[index].className.replace("w3-opacity-off", "");        });	           document.getElementsByClassName("mySlides")[this.slideIndex-1] != undefined ? document.getElementsByClassName("mySlides")[this.slideIndex-1].style.display = "block": null;                document.getElementsByClassName("demo")[this.slideIndex-1] != undefined ? document.getElementsByClassName("demo")[this.slideIndex-1].className += "w3-opacity-off" : null;}componentDidMount() {     	const context = this; 	  	this.xhttp = new XMLHttpRequest();	this.xhttp.onreadystatechange = function() {		if (this.readyState == 4 && this.status == 200) {				 							context.setState({hotel:JSON.parse(this.responseText), tripID:window.sessionStorage.tripID},function(){			 					window.sessionStorage.fromdate != null && window.sessionStorage.todate != null ?   context.checkAvailability(window.sessionStorage.fromdate.split("-"), window.sessionStorage.todate.split("-"),window.sessionStorage.lengthOfstay) : "" ;			      });	  	  		}};this.xhttp.open("get", "/api/hotel", true);this.xhttp.setRequestHeader("Content-Type", "application/json"); this.xhttp.send() ;   }selectRoom(event,item){				this.setState({roomChoosen:item},function(){			 										document.getElementById('myModalReservation').style.display = "block";								document.getElementsByClassName("mySlides")[0].style.display = "block";												      });	  		}updateRooms(resId){		const reservationObj = {			 resId:resId,			 };this.xhttp = new XMLHttpRequest();	this.xhttp.onreadystatechange = function() {		if (this.readyState == 4 && this.status == 200) {						JSON.parse(this.responseText).ERROR != "" ? 						( document.getElementById("spinnerText").style.opacity = 0 ,  document.getElementById("spinnerIcon").style.opacity = 0 , document.getElementById("spinnerText").innerHTML = " Something went wrong. Please try again.",						  document.getElementById("spinnerIcon").innerHTML = "mood_bad" ,document.getElementById("spinnerText").style.opacity = 1 ,  document.getElementById("spinnerIcon").style.opacity = 1  )				:  window.location.assign("/shop/checkout.html");		}};this.xhttp.open("PUT", "/api/hotel", true);this.xhttp.setRequestHeader("Content-Type", "application/json");this.xhttp.send(JSON.stringify(reservationObj));}checkout(event,deposit,subtotal,discount,amenityTotal,roomTotal){const context = this;var formData = new FormData();const total = Number(deposit) * 2;formData.append('fromdate',this.state.fromDate),formData.append('todate',this.state.toDate),formData.append('deposit',deposit),formData.append('total', total.toFixed(2)),formData.append('numofdays',this.state.stay),formData.append('guests',this.state.guests),formData.append('roomarray',JSON.stringify(this.state.userRooms)),formData.append('offerarray',JSON.stringify(this.state.userOffers)),formData.append('amenityarray',JSON.stringify(this.state.userAmenities)),formData.append('subtotal',subtotal),formData.append('discount',discount),formData.append('amenityTotal',amenityTotal),formData.append('tripID',this.state.tripID),formData.append('roomTotal',roomTotal)this.xhttp = new XMLHttpRequest();	this.xhttp.onreadystatechange = function() {		if (this.readyState == 4 && this.status == 200) {												 JSON.parse(this.responseText).ERROR != "" ? 						( document.getElementById("spinnerText").style.opacity = 0 ,  document.getElementById("spinnerIcon").style.opacity = 0 , document.getElementById("spinnerText").innerHTML = " Something went wrong. Please try again.",			  document.getElementById("spinnerIcon").innerHTML = "mood_bad"  , document.getElementById("spinnerText").style.opacity = 1 ,  document.getElementById("spinnerIcon").style.opacity = 1			)			: 						(												sessionStorage.sinopiainnreservationID =  JSON.parse(this.responseText).RESULT._id.replace(/\"/g, ""),						sessionStorage.sinopiainnReservation = JSON.stringify(JSON.parse(this.responseText).RESULT),							context.updateRooms(JSON.parse(this.responseText).RESULT._id.replace(/\"/g, "")) 						) ;							}}this.xhttp.open("POST", "/api/reservation", true);this.state.guests == 0 ? alert("You need to confirm at least one guest to continue") : (   document.querySelector('.modalReservationError').style.display="table" , this.xhttp.send(formData)  ) ;}	addAmenity(item,event){	var userAmenities = this.state.userAmenities;			event.target.value === 'yes' ? userAmenities.indexOf(item) != -1 ? "" : userAmenities.push(item) : userAmenities.indexOf(item) != -1 ? userAmenities.splice( userAmenities.indexOf(item) , 1)  :  "";			this.setState({userAmenities : userAmenities});				}numOfguest (item,event) {   var guests = 0;       this.setState({userRooms : this.state.userRooms.map(function(currentValue, index, arr ) {          currentValue === item  ?    event.target.getAttribute('data-id') == "adults"  ?  (  Number(event.target.value) +  Number(currentValue.children) > currentValue.occupancy  ? ( alert( currentValue.occupancy + "  people is this rooms current capacity")  , currentValue.adults != 0 ? event.target.value = currentValue.adults :  event.target.value = 0 ) : currentValue.adults = event.target.value )   :  event.target.getAttribute('data-id') == "children" ?   (  Number(event.target.value) + Number (currentValue.adults) > currentValue.occupancy  ? ( alert( currentValue.occupancy + "  people is this rooms current capacity") , event.target.value = 0 ) : currentValue.children = event.target.value )  :  event.target.getAttribute('data-id') == "infant"  ?  currentValue.infants = event.target.value  :  ""   : "" ;      guests += Number(currentValue.adults) + Number(currentValue.children);      return currentValue ;        }) });	 this.setState({guests : guests},function (){		 		 		 		 });	            	}addtoArray (item,event) {	var roomArray = this.state.userRooms ;var offerArray = this.state.userOffers ; event.target.getAttribute('data-id') === "rooms" ?  roomArray.indexOf(item) == -1 ?  roomArray.push(item) : roomArray.splice( roomArray.indexOf(item) , 1)  :  offerArray.indexOf(item) == -1 ? offerArray.push(item) : offerArray.splice( offerArray.indexOf(item) , 1) ;event.target.getAttribute('data-id') == "rooms" ?  this.setState({userRooms : roomArray}) :  this.setState({userOffers : offerArray},function(){				}) ;}formatDate(date) {  var monthNames = [    "Jan", "Feb", "Mar",    "Apr", "May", "Jun", "Jul",    "Aug", "Sep", "Oct",    "Nov", "Dec"  ]; var dayNames = [    "Sun", "Mon", "Tue",    "Wed", "Thu", "Fri", "Sat"  ];  return  dayNames[date.getDay()]+', '+date.getDate() + ' ' + monthNames[date.getMonth()] + ' ' + date.getFullYear();    }checkAvailability(fromDate,toDate,lengthOfstay){	const context = this;	    this.setState({stay : lengthOfstay, fromDate: fromDate[2]+"-"+fromDate[1]+"-"+fromDate[0]  ,toDate:toDate[2]+"-"+toDate[1]+"-"+toDate[0]},function(){ 			var booked;	var rooms = [];					document.getElementById('fromdate').value= context.formatDate(new Date( fromDate[2]+"-"+fromDate[1]+"-"+fromDate[0] ) ) ;		document.getElementById('todate').parentElement.classList.add('is-focused');		document.getElementById('fromdate').parentElement.classList.add('is-focused');		document.getElementById('todate').value= context.formatDate(new Date( toDate[2]+"-"+toDate[1]+"-"+toDate[0] )); 		this.state.hotel[0].rooms.forEach( (element , index) => {			booked = false;				element.booking.forEach( function(value , counter){					(( new Date(value.fromdate)  <=  new Date( fromDate[2]+"-"+fromDate[1]+"-"+fromDate[0] )  ) && ( new Date(value.enddate) >= new Date(fromDate[2]+"-"+fromDate[1]+"-"+fromDate[0] )  ) )  ||  (( new Date(value.fromdate) <= new Date(toDate[2]+"-"+toDate[1]+"-"+toDate[0]) ) && (new Date(value.enddate) >= new Date(toDate[2]+"-"+toDate[1]+"-"+toDate[0]) ))  ?  booked = true : ""  ; 			});			!booked ? ( rooms.push(element) ) : "";		});	this.setState({rooms : rooms}, () => {			var offers = [];			this.state.hotel[0].offers.forEach( (element , index) =>{	(( new Date(element.validdate)   <=   new Date( fromDate[2]+"-"+fromDate[1]+"-"+fromDate[0] )  &&  new Date(element.exdate)   >= new Date( fromDate[2]+"-"+fromDate[1]+"-"+fromDate[0] )  )  && ( new Date(element.validdate)   <=   new Date( toDate[2]+"-"+toDate[1]+"-"+toDate[0] )  &&  new Date(element.exdate)   >= new Date( toDate[2]+"-"+toDate[1]+"-"+toDate[0] )  ) )  ||  (  ( element.nights  <= context.state.stay )  &&  element.nights != ""  )   || (  element.token === context.state.promo )  ?  offers.push(element) :  "" ;			});										this.setState({offers : offers, amenities:context.state.hotel[0].amenities},() =>{							$('html, body').animate({				 						scrollTop: $("#availableRooms").offset().top									}, 2000);									});			});									});}	   render() {	         return <main className="mdl-layout__content reservation__content">								<div className="demo-container mdl-grid reservation-grid">															<div className="demo-content mdl-color--white  content mdl-color-text--grey-800  demo-content-reservation">					<Datepicker  checkAvailability={this.checkAvailability} fromDate={this.state.fromDate} toDate={this.state.toDate} />								  <div className="mdl-grid">  <div className="mdl-cell mdl-cell--6-col mdl-cell--8-col-tablet  mdl-cell--4-col-phone"><table className="mdl-data-table mdl-js-data-table" id="availableRooms">  <thead><tr><th className="mdl-data-table__cell--non-numeric" colSpan="2"> AVAILABLE ROOMS</th></tr></thead></table><Rooms rooms={this.state.rooms}  addtoArray={this.addtoArray}  selectRoom={this.selectRoom}/>     </div>  <div className="mdl-cell mdl-cell--6-col mdl-cell--8-col-tablet  mdl-cell--4-col-phone responsiveTable" ><table className="mdl-data-table mdl-js-data-table">  <thead><tr><th className="mdl-data-table__cell--non-numeric">Room</th><th className="mdl-data-table__cell--non-numeric">Occ</th><th className="mdl-data-table__cell--non-numeric">Guest</th><th className="mdl-data-table__cell--non-numeric"></th></tr></thead>   <Userroom rooms={this.state.userRooms}   addtoArray={this.addtoArray}  numOfguest={this.numOfguest}/></table>  </div></div><div className="mdl-grid">  <div className="mdl-cell mdl-cell--6-col mdl-cell--8-col-tablet  mdl-cell--4-col-phone"><table className="mdl-data-table mdl-js-data-table"> <thead><tr><th className="mdl-data-table__cell--non-numeric" colSpan="2">AVAILABLE OFFERS</th></tr></thead></table><Offers offers={this.state.offers} addtoArray={this.addtoArray} /> 					  </div>  <div className="mdl-cell mdl-cell--6-col mdl-cell--8-col-tablet  mdl-cell--4-col-phone"><table className="mdl-data-table mdl-js-data-table">  <thead><tr><th className="mdl-data-table__cell--non-numeric" colSpan="2"></th></tr></thead>									<Useroffers offers={this.state.userOffers}   addtoArray={this.addtoArray}/></table>						  </div></div><div className="mdl-grid">  <div className="mdl-cell mdl-cell--6-col mdl-cell--8-col-tablet  mdl-cell--4-col-phone"><table className="mdl-data-table mdl-js-data-table"> <thead><tr><th className="mdl-data-table__cell--non-numeric" colSpan="2">AVAILABLE AMENITIES</th></tr></thead></table><Amenities amenities={this.state.amenities} addAmenity={this.addAmenity}/>   </div>  <div className="mdl-cell mdl-cell--6-col mdl-cell--8-col-tablet  mdl-cell--4-col-phone"><CheckoutTill  checkout={this.checkout} rooms={this.state.userRooms} offers={this.state.userOffers}  amenities={this.state.userAmenities} stay={this.state.stay}  guests={this.state.guests} />							  </div></div> </div></div><ModalContainer   room={this.state.roomChoosen} showDiv={this.showDiv} plusSlides={this.plusSlides}/>	<div id="myModal" className="modalReservationError" >			<span className="closeReservation cursor" onClick={(e) => context.closeError()}>&times;</span>			<div  className="innermodalReservation">			<h1 id="spinnerText" className="spinnerText">Processing, please wait.</h1>			<i className="material-icons" id="spinnerIcon">mood</i>			<p className="mdl-spinner mdl-js-spinner mdl-spinner--single-color  progressIcons" id="spinner"></p>			</div>	</div>			</main>	     }}module.exports = ReservationContainer;